#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector< int > vi;
typedef vector<ll> vl;
typedef pair<long long,long long> pii;

#define endl '\n'
#define PB push_back
#define eb emplace_back
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define rall(a) (a).rbegin(),(a).rend()

#define MOD 100003

#define mem(a,b) memset(a, b, sizeof(a) )
#define sqr(a) ((a) * (a))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);

ll gcd ( ll a, ll b ){    return __gcd ( a, b );}
ll lcm ( ll a, ll b ){    return a * ( b / gcd ( a, b ) );}

void solve(int cs) {
    vector<vector<int>> grid = {{}, {3}, {3}, {}, {0, 1}, {0, 2}};
    int n = grid.size();

    vector<int> graph[n];
    int mp[n] = {0};

    for( int i = 0; i < n; i++ ){
        for( int j = 0; j < grid[i].size(); j++ ){
            graph[i].push_back(grid[i][j]);
        }
    }

    for( int i = 0; i < n; i++ ){
        for( int j = 0; j < grid[i].size(); j++ ){
            mp[graph[i][j]]++;
        }
    }
    vector<int> ans;
    queue<int> q;

    //for( int i = 0; i < n; i++ )cout << mp[i] << endl;

    for( int i = 0;i < n; i++ ){
        if( mp[i] == 0 ){
            q.push(i);
        }
    }

    while( !q.empty() ){
        int cur = q.front();
        q.pop();
        ans.push_back(cur);
        for( auto u : graph[cur] ){
            mp[u]--;
            if( mp[u] == 0 ){
                q.push(u);
            }
        }
    }
    for( auto u : ans )cout << u << " ";
        cout << endl;
}
int main() {

    int t = 1, cs = 1;
    //cin >> t;

    while(t--)
    {
        solve(cs++);
    }
    return 0;
}
