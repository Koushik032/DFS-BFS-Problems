///   ***   ---   |||         In the name of VOGOBAN        |||   ---   ***   ///

#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef pair<int,int> pii;

#define endl '\n'
#define PB push_back
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define rall(a) (a).rbegin(),(a).rend()

#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define sqr(a) ((a) * (a))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);


ll gcd ( ll a, ll b ){     return __gcd ( a, b );}
ll lcm ( ll a, ll b ){    return a * ( b / gcd ( a, b ) );}

const int mx = 1e5 + 10;
vector< int > graph[mx];
bool vis[mx];
int depht[mx];

void DFS( int vertex , int par = -1 )
{
    for ( auto child : graph[vertex] )
    {
        if ( par == child )continue;
            depht[child] = depht[vertex] + 1;
            DFS( child, vertex );
    }
}

int main()
{
    optimize();

        int n;
        cin >> n;

        for ( int i = 0; i < n-1; i++ )
        {
            int e1, e2;
            cin >> e1 >> e2;
            graph[e1].PB(e2);
            graph[e2].PB(e1);
        }
        DFS(1);
        int dept = 0, depth_node = 0;

        for ( int i = 0; i < n; i++ )
        {
            if ( dept < depht[i] )
            {
                dept = depht[i];
                depth_node = i ;
            }
            depht[i] = 0;
        }
        //cout << depth_node << endl;

        DFS(depth_node);
        int mx_depth = 0, mxdepth_node = 0;
        for ( int i = 0; i < n; i++ )
        {
            if ( mx_depth < depht[i] )
            {
                mx_depth = depht[i];
                mxdepth_node = i ;
            }
        }

        cout << mx_depth << endl;




    return 0;
}
